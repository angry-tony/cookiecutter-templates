classes:
{%- if cookiecutter.get('local_repositories', 'False') == 'True' %}
- system.linux.system.repo_local.mcp.salt
- system.linux.system.repo_local.mcp.extra
{%- if cookiecutter.openstack_enabled == 'True' %}
- system.linux.system.repo_local.mcp.apt_mirantis.openstack
{%- endif %}
- system.linux.system.repo_local.mcp.apt_mirantis.ubuntu
- system.linux.system.repo_local.mcp.apt_mirantis.glusterfs
- system.linux.system.repo_local.mcp.apt_mirantis.saltstack_2016_3
{%- if cookiecutter.stacklight_enabled == 'True' and cookiecutter.stacklight_version == '1' %}
- system.linux.system.repo_local.mcp.apt_mirantis.sensu
{%- endif %}
{%- else %}
- system.linux.system.repo.mcp.salt
- system.linux.system.repo.mcp.extra
{%- if cookiecutter.openstack_enabled == 'True' %}
- system.linux.system.repo.mcp.apt_mirantis.openstack
{%- endif %}
- system.linux.system.repo.mcp.apt_mirantis.ubuntu
- system.linux.system.repo.mcp.apt_mirantis.glusterfs
- system.linux.system.repo.mcp.apt_mirantis.saltstack_2016_3
{%- if cookiecutter.stacklight_enabled == 'True' and cookiecutter.stacklight_version == '1' %}
- system.linux.system.repo.mcp.apt_mirantis.sensu
{%- endif %}
{%- endif %}
{%- if cookiecutter.openstack_enabled == 'True' %}
- system.glusterfs.client.cluster
- system.glusterfs.client.volume.salt_pki
{%- endif %}
- system.salt.master.pkg
- system.salt.minion.ca.salt_master
- system.salt.master.api
- system.reclass.storage.salt
{%- if cookiecutter.deployment_type == 'physical' and (cookiecutter.openstack_enabled == 'True' or (cookiecutter.kubernetes_enabled == 'True' and (cookiecutter.stacklight_enabled == 'True' or cookiecutter.cicd_enabled == 'True'))) %}
- system.reclass.storage.system.physical_control_cluster
{%- endif %}
{%- if (cookiecutter.kubernetes_enabled == 'True' and cookiecutter.kubernetes_network_opencontrail_enabled == 'True' ) or (cookiecutter.openstack_enabled == 'True' and cookiecutter.openstack_network_engine == 'opencontrail') %}
- system.reclass.storage.system.opencontrail_analytics_cluster
- system.reclass.storage.system.opencontrail_control_cluster
{%- endif %}
{%- if cookiecutter.openstack_enabled == 'True' and cookiecutter.openstack_network_engine == 'ovs' %}
- system.reclass.storage.system.openstack_gateway_cluster
{%- endif %}
{%- if cookiecutter.openstack_enabled == 'True' %}
- system.reclass.storage.system.openstack_control_cluster
- system.reclass.storage.system.openstack_proxy_cluster
- system.reclass.storage.system.openstack_database_cluster
- system.reclass.storage.system.openstack_message_queue_cluster
{%- if cookiecutter.bmk_enabled == 'True' %}
- system.reclass.storage.system.openstack_benchmark_single
{%- endif %}
- system.reclass.storage.system.openstack_control_upgrade_single
{%- endif %}
{%- if cookiecutter.oss_enabled == 'True' %}
- system.reclass.storage.system.oss_cluster
{%- endif %}
{%- if cookiecutter.stacklight_enabled == 'True' %}
- system.reclass.storage.system.stacklight_log_cluster
- system.reclass.storage.system.stacklight_telemetry_cluster
{%- if cookiecutter.stacklight_version == '1' %}
- system.reclass.storage.system.stacklight_monitor_cluster
{%- endif %}
{%- if cookiecutter.stacklight_version == '2' %}
- system.reclass.storage.system.stacklightv2_server_cluster
{%- endif %}
{%- endif %}
{%- if cookiecutter.cicd_enabled == 'True' %}
- system.reclass.storage.system.cicd_control_cluster
{%- endif %}
{%- if cookiecutter.get('ceph_enabled', 'False') == 'True' %}
- system.reclass.storage.system.ceph_mon_cluster
- system.reclass.storage.system.ceph_rgw_cluster
{%- endif %}
{%- if cookiecutter.kubernetes_enabled == 'True' %}
- system.salt.minion.cert.k8s_server
- system.reclass.storage.system.kubernetes_control_cluster
{%- endif %}
- service.jenkins.client
- system.jenkins.client.credential.salt
- system.jenkins.client.job.deploy.openstack
{%- if cookiecutter.deployment_type == 'physical' %}
- cluster.{{ cookiecutter.cluster_name }}.infra.maas
{%- endif %}
- cluster.{{ cookiecutter.cluster_name }}.infra
- cluster.{{ cookiecutter.cluster_name }}.infra.backup.client_common
{%- if cookiecutter.use_default_network_scheme != 'False' %}
- cluster.{{ cookiecutter.cluster_name }}.infra.networking.config
{%- endif %}
parameters:
  _param:
    salt_master_base_environment: prd
    reclass_data_repository: "{{ cookiecutter.reclass_repository }}"
    reclass_data_revision: master
    reclass_config_master: ${_param:infra_config_deploy_address}
    single_address: ${_param:infra_config_address}
    deploy_address: ${_param:infra_config_deploy_address}
    linux_system_codename: xenial
    salt_api_password_hash: "{{ cookiecutter.salt_api_password_hash }}"
    salt_master_host: ${_param:infra_config_deploy_address}
    jenkins_git_url: 'git@cfg01:/home/repo'
    jenkins_gerrit_url: ${_param:jenkins_git_url}
    salt_api_password: {{ cookiecutter.salt_api_password }}
    jenkins_salt_api_url: "http://${_param:salt_master_host}:6969"
    jenkins_pipeline_library_url: git@cfg01:/home/repo/mcp-ci/pipeline-library
  jenkins:
    client:
      lib:
        pipeline-library:
          url: ${_param:jenkins_pipeline_library_url}
          branch: ${_param:jenkins_pipelines_branch}
      master:
        host: ${_param:salt_master_host}
        port: 8081
        password: r00tme
{%- if cookiecutter.get('offline_deployment', 'False') == 'True' %}
      globalenvprop:
        OFFLINE_DEPLOYMENT:
          value: "true"
{%- endif %}
  salt:
    master:
      command_timeout: 600
      user:
        deploy:
          permissions: ${_param:salt_master_api_permissions}
      reactor:
        reclass/minion/classify:
        - salt://reclass/reactor/node_register.sls
      backup: true
    minion:
      backup: true
  reclass:
    storage:
      {%- if cookiecutter.kubernetes_enabled == 'True' %}
      class_mapping:
        common_node:
          expression: all
          node_param:
            single_address:
              value_template: <<node_control_ip>>
            linux_system_codename:
              value_template: <<node_os>>
            salt_master_host:
              value_template: <<node_master_ip>>
            deploy_address:
              value_template: <<node_deploy_ip>>
        kubernetes_compute:
          expression: <<node_hostname>>__startswith__cmp
          node_class:
            value_template:
              - cluster.<<node_cluster>>.kubernetes.compute
          node_param:
            deploy_address:
              value_template: <<node_deploy_ip>>
      {%- endif %}
      data_source:
        engine: local
      node:
        {%- if cookiecutter.kubernetes_enabled == 'True' %}
        kubernetes_control_node01:
          {%- if cookiecutter.analytics_pipeline_enabled == 'True' %}
          classes:
          - system.helm.analytics_pipeline
          {%- endif %}
          params:
            tenant_address: ${_param:kubernetes_control_node01_tenant_address}
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:kubernetes_control_node01_deploy_address}
        {%- endif %}
        kubernetes_control_node02:
          params:
            tenant_address: ${_param:kubernetes_control_node02_tenant_address}
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:kubernetes_control_node02_deploy_address}
        {%- endif %}
        kubernetes_control_node03:
          params:
            tenant_address: ${_param:kubernetes_control_node03_tenant_address}
          {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:kubernetes_control_node03_deploy_address}
          {%- endif %}
        {%- if cookiecutter.stacklight_enabled != 'True' or cookiecutter.cicd_enabled != 'True' %}
          classes:
          - cluster.${_param:cluster_name}.infra.backup.server
        {%- endif %}
        {%- if cookiecutter.kubernetes_network_opencontrail_enabled == 'True' %}
        opencontrail_control_node01:
          params:
            rabbitmq_cluster_role: master
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:opencontrail_control_node01_deploy_address}
        {%- endif %}
        opencontrail_control_node02:
          params:
            rabbitmq_cluster_role: slave
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:opencontrail_control_node02_deploy_address}
        {%- endif %}
        opencontrail_control_node03:
          params:
            rabbitmq_cluster_role: slave
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:opencontrail_control_node03_deploy_address}
        {%- endif %}
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        opencontrail_analytics_node01:
          params:
            deploy_address: ${_param:opencontrail_analytics_node01_deploy_address}
        opencontrail_analytics_node02:
          params:
            deploy_address: ${_param:opencontrail_analytics_node02_deploy_address}
        opencontrail_analytics_node03:
          params:
            deploy_address: ${_param:opencontrail_analytics_node03_deploy_address}
        {%- endif %}
        {%- endif %}
        {%- endif %}
        {%- if cookiecutter.deployment_type == 'physical' and (cookiecutter.openstack_enabled == 'True' or (cookiecutter.kubernetes_enabled == 'True' and (cookiecutter.stacklight_enabled == 'True' or cookiecutter.cicd_enabled == 'True'))) %}
        infra_kvm_node01:
          params:
            keepalived_vip_priority: 100
            linux_system_codename: xenial
        infra_kvm_node02:
          params:
            keepalived_vip_priority: 101
            linux_system_codename: xenial
        infra_kvm_node03:
          classes:
          - cluster.${_param:cluster_name}.infra.backup.server
          params:
            keepalived_vip_priority: 102
            linux_system_codename: xenial
        {%- endif %}
        {%- if cookiecutter.stacklight_enabled == 'True' and cookiecutter.stacklight_version == '1' %}
        stacklight_log_node01:
          classes:
          - system.elasticsearch.client.single
          {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
          params:
            deploy_address: ${_param:stacklight_log_node01_deploy_address}
        stacklight_log_node02:
          params:
            deploy_address: ${_param:stacklight_log_node02_deploy_address}
        stacklight_log_node03:
          params:
            deploy_address: ${_param:stacklight_log_node03_deploy_address}
          {%- endif %}
        stacklight_monitor_node01:
          classes:
          - system.grafana.client.single
          - system.kibana.client.single
          {%- if cookiecutter.get('vnf_onboarding_enabled', 'False') == 'True' %}
          - system.kibana.client.vnf-onboarding
          {%- endif %}
          {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
          params:
            deploy_address: ${_param:stacklight_monitor_node01_deploy_address}
        stacklight_monitor_node02:
          params:
            deploy_address: ${_param:stacklight_monitor_node02_deploy_address}
        stacklight_monitor_node03:
          params:
            deploy_address: ${_param:stacklight_monitor_node03_deploy_address}
            {%- if cookiecutter.kubernetes_enabled == 'False' %}
        stacklight_telemetry_node01:
          params:
            deploy_address: ${_param:stacklight_telemetry_node01_deploy_address}
        stacklight_telemetry_node02:
          params:
            deploy_address: ${_param:stacklight_telemetry_node02_deploy_address}
        stacklight_telemetry_node03:
          params:
            deploy_address: ${_param:stacklight_telemetry_node03_deploy_address}
            {%- endif %}
          {%- endif %}
        {%- endif %}
        {%- if cookiecutter.stacklight_enabled == 'True' and cookiecutter.stacklight_version == '2' %}
          {%- if  cookiecutter.openstack_enabled == 'False' %}
        stacklight_telemetry_node01:
          classes:
          - service.galera.master.cluster
          params:
            mysql_cluster_role: master
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:stacklight_telemetry_node01_deploy_address}
            {%- endif %}
        stacklight_telemetry_node02:
          classes:
          - service.galera.slave.cluster
          params:
            mysql_cluster_role: slave
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:stacklight_telemetry_node02_deploy_address}
            {%- endif %}
        stacklight_telemetry_node03:
          classes:
          - service.galera.slave.cluster
          params:
            mysql_cluster_role: slave
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:stacklight_telemetry_node03_deploy_address}
            {%- endif %}
          {%- elif cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        stacklight_telemetry_node01:
          params:
            deploy_address: ${_param:stacklight_telemetry_node01_deploy_address}
        stacklight_telemetry_node02:
          params:
            deploy_address: ${_param:stacklight_telemetry_node02_deploy_address}
        stacklight_telemetry_node03:
          params:
            deploy_address: ${_param:stacklight_telemetry_node03_deploy_address}
          {%- endif %}
        stacklight_log_node01:
          classes:
          - system.elasticsearch.client.single
          - system.kibana.client.single
          {%- if cookiecutter.get('vnf_onboarding_enabled', 'False') == 'True' %}
          - system.kibana.client.vnf-onboarding
          {%- endif %}
          {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
          params:
            deploy_address: ${_param:stacklight_log_node01_deploy_address}
        stacklight_log_node02:
          params:
            deploy_address: ${_param:stacklight_log_node02_deploy_address}
        stacklight_log_node03:
          params:
            deploy_address: ${_param:stacklight_log_node03_deploy_address}
        stacklight_server_node01:
          params:
            deploy_address: ${_param:stacklight_monitor_node01_deploy_address}
        stacklight_server_node02:
          params:
            deploy_address: ${_param:stacklight_monitor_node02_deploy_address}
        stacklight_server_node03:
          params:
            deploy_address: ${_param:stacklight_monitor_node03_deploy_address}
          {%- endif %}
        {%- endif %}
        {%- if cookiecutter.openstack_enabled == 'True' and cookiecutter.openstack_network_engine == 'opencontrail' %}
        opencontrail_control_node01:
          classes:
          - cluster.${_param:cluster_name}.opencontrail.control_init
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
          params:
            deploy_address: ${_param:opencontrail_control_node01_deploy_address}
        opencontrail_control_node02:
          params:
            deploy_address: ${_param:opencontrail_control_node02_deploy_address}
        opencontrail_control_node03:
          params:
            deploy_address: ${_param:opencontrail_control_node03_deploy_address}
        opencontrail_analytics_node01:
          params:
            deploy_address: ${_param:opencontrail_analytics_node01_deploy_address}
        opencontrail_analytics_node02:
          params:
            deploy_address: ${_param:opencontrail_analytics_node02_deploy_address}
        opencontrail_analytics_node03:
          params:
            deploy_address: ${_param:opencontrail_analytics_node03_deploy_address}
        {%- endif %}
        {%- endif %}
        {%- if cookiecutter.openstack_enabled == 'True' %}
        openstack_control_node01:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_control_node01_deploy_address}
            {%- endif %}
          classes:
          - cluster.${_param:cluster_name}.openstack.control_init
        openstack_control_node02:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_control_node02_deploy_address}
            {%- endif %}
        openstack_control_node03:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_control_node03_deploy_address}
            {%- endif %}
          {%- if cookiecutter.deployment_type == 'virtual' %}
          classes:
          - cluster.${_param:cluster_name}.infra.backup.server
          {%- endif %}
        openstack_database_node01:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_database_node01_deploy_address}
            {%- endif %}
          classes:
          - cluster.${_param:cluster_name}.openstack.database_init
        openstack_database_node02:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_database_node02_deploy_address}
            {%- endif %}
        openstack_database_node03:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_database_node03_deploy_address}
            {%- endif %}
        openstack_message_queue_node01:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_message_queue_node01_deploy_address}
            {%- endif %}
        openstack_message_queue_node02:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_message_queue_node02_deploy_address}
            {%- endif %}
        openstack_message_queue_node03:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_message_queue_node03_deploy_address}
            {%- endif %}
        openstack_proxy_node01:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_proxy_node01_deploy_address}
            {%- endif %}
        openstack_proxy_node02:
          params:
            linux_system_codename: xenial
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
            deploy_address: ${_param:openstack_proxy_node02_deploy_address}
            {%- endif %}
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        openstack_control_upgrade_node01:
          params:
            deploy_address: ${_param:openstack_upgrade_node01_deploy_address}
        {%- if cookiecutter.openstack_network_engine == 'ovs' %}
        openstack_gateway_node01:
          params:
            deploy_address: ${_param:openstack_gateway_node01_deploy_address}
        openstack_gateway_node02:
          params:
            deploy_address: ${_param:openstack_gateway_node02_deploy_address}
        openstack_gateway_node03:
          params:
            deploy_address: ${_param:openstack_gateway_node03_deploy_address}
        {%- endif %}
        {%- endif %}
        {%- if cookiecutter.bmk_enabled == 'True' and cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        openstack_benchmark_node01:
          params:
            deploy_address: ${_param:openstack_benchmark_node01_deploy_address}
        {%- endif %}
        {%- if cookiecutter.get('local_repositories', 'False') == 'True' %}
        aptly_server_node01:
          name: ${_param:aptly_server_hostname}01
          domain: ${_param:cluster_domain}
          {%- if cookiecutter.get('offline_deployment', 'False') != 'True' %}
          classes:
          - cluster.${_param:cluster_name}.cicd.aptly
          {%- endif %}
          params:
            salt_master_host: ${_param:reclass_config_master}
            linux_system_codename: xenial
            single_address: ${_param:aptly_server_control_address}
            deploy_address: ${_param:aptly_server_deploy_address}
        {%- endif %}
        {%- if cookiecutter.get('ceph_enabled', 'False') == 'True' and cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        ceph_mon_node01:
          params:
            deploy_address: ${_param:ceph_mon_node01_deploy_address}
        ceph_mon_node02:
          params:
            deploy_address: ${_param:ceph_mon_node02_deploy_address}
        ceph_mon_node03:
          params:
            deploy_address: ${_param:ceph_mon_node03_deploy_address}
        ceph_rgw_node01:
          params:
            deploy_address: ${_param:ceph_rgw_node01_deploy_address}
        ceph_rgw_node02:
          params:
            deploy_address: ${_param:ceph_rgw_node02_deploy_address}
        ceph_rgw_node03:
          params:
            deploy_address: ${_param:ceph_rgw_node03_deploy_address}
        {%- endif %}
        {%- if cookiecutter.get('cicd_enabled', 'False') == 'True' and cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        cicd_control_node01:
          params:
            deploy_address: ${_param:cicd_control_node01_deploy_address}
        cicd_control_node02:
          params:
            deploy_address: ${_param:cicd_control_node02_deploy_address}
        cicd_control_node03:
          params:
            deploy_address: ${_param:cicd_control_node03_deploy_address}
        {%- endif %}
        {%- if cookiecutter.openstack_enabled == 'True' %}
        {%- if cookiecutter.compute_padding_with_zeros == 'False' %}
        {%- set compute_digits = 0 %}
        {%- else %}
        {%- set compute_digits = 3 if cookiecutter.openstack_compute_count|string|length < 3 else cookiecutter.openstack_compute_count|string|length -%}
        {%- endif %}
        {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        {%- for i in range(cookiecutter.openstack_compute_count|int) %}
        {%- set ip_start = 100 -%}
        {%- set cmp_start = 0 %}
        openstack_compute_node{{ ("%0" + compute_digits|string + "d")|format(cmp_start + loop.index) }}:
          name: ${_param:openstack_compute_rack01_hostname}{{ ("%0" + compute_digits|string + "d")|format(cmp_start + loop.index) }}
          domain: ${_param:cluster_domain}
          classes:
          - cluster.${_param:cluster_name}.openstack.compute
          params:
            salt_master_host: ${_param:reclass_config_master}
          {%- if cookiecutter.get('openstack_nfv_dpdk_enabled', 'False') == 'True' and cookiecutter.openstack_network_engine == 'opencontrail' %}
            linux_system_codename: trusty
          {%- else %}
            linux_system_codename: xenial
          {%- endif %}
            single_address: ${_param:openstack_compute_rack01_single_subnet}.{{ ip_start|int + loop.index }}
            deploy_address: ${_param:openstack_compute_rack01_deploy_subnet}.{{ ip_start|int + loop.index }}
            tenant_address: ${_param:openstack_compute_rack01_tenant_subnet}.{{ ip_start|int + loop.index }}
            {%- if cookiecutter.get('ceph_enabled', 'False') == 'True' %}
            {%- if cookiecutter.get('ceph_hyper_converged', 'False') == 'True' %}
            backend_address: ${_param:ceph_osd_rack01_backend_subnet}.{{ ip_start|int + loop.index }}
            ceph_crush_parent: rack01
            {%- endif %}
            {%- endif %}
        {%- endfor %}
        {%- else %}
        openstack_compute_rack01:
          name: ${_param:openstack_compute_rack01_hostname}<<count>>
          domain: ${_param:cluster_domain}
          classes:
        {%- if cookiecutter.get('openstack_nfv_sriov_enabled', 'False') == 'True' %}
          - cluster.${_param:cluster_name}.openstack.compute.sriov
        {%- endif %}
        {%- if cookiecutter.get('openstack_nfv_dpdk_enabled', 'False') == 'True' %}
          - cluster.${_param:cluster_name}.openstack.compute.dpdk
        {%- endif %}
        {%- if not cookiecutter.get('openstack_nfv_dpdk_enabled', 'False') == 'True' and not cookiecutter.get('openstack_nfv_sriov_enabled', 'False') == 'True' %}
          - cluster.${_param:cluster_name}.openstack.compute
        {%- endif %}
          repeat:
            count: {{ cookiecutter.openstack_compute_count }}
            start: 1
            digits: {{ compute_digits }}
            params:
              single_address:
                value: ${_param:openstack_compute_rack01_single_subnet}.<<count>>
                start: 101
            {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
              deploy_address:
                value: ${_param:openstack_compute_rack01_deploy_subnet}.<<count>>
                start: 101
            {%- endif %}
              tenant_address:
                value: ${_param:openstack_compute_rack01_tenant_subnet}.<<count>>
                start: 101
            {%- if cookiecutter.get('ceph_enabled', 'False') == 'True' %}
              {%- if cookiecutter.get('ceph_hyper_converged', 'False') == 'True' %}
              backend_address:
                value: ${_param:ceph_osd_rack01_backend_subnet}.<<count>>
                start: 101
              {%- endif %}
            {%- endif %}
          params:
            salt_master_host: ${_param:reclass_config_master}
          {%- if cookiecutter.get('ceph_enabled', 'False') == 'True' %}
            {%- if cookiecutter.get('ceph_hyper_converged', 'False') == 'True' %}
            ceph_crush_parent: rack01
            {%- endif %}
          {%- endif %}
          {%- if cookiecutter.get('openstack_nfv_dpdk_enabled', 'False') == 'True' and cookiecutter.openstack_network_engine == 'opencontrail' %}
            linux_system_codename: trusty
          {%- else %}
            linux_system_codename: xenial
          {%- endif %}
        {%- endif %}
        {%- if cookiecutter.get('openstack_nfv_sriov_enabled', 'False') == 'True' %}
            # sriov_nic01_device_name: eth7
            # sriov_nic01_numvfs: 7
            # sriov_nic01_physical_network: physnet3
            # sriov_unsafe_interrupts: False
        {%- endif %}
        {%- if cookiecutter.get('openstack_nfv_dpdk_enabled', 'False') == 'True' %}
        {%- if cookiecutter.openstack_network_engine == 'opencontrail' %}
            # compute_vrouter_dpdk_mac_address: 00:1b:21:87:21:99
            # compute_vrouter_dpdk_pci: "'0000:05:00.1'"
            # compute_vrouter_taskset: "-c 1,2"
            # compute_vrouter_socket_mem: "1024"
        {%- elif cookiecutter.openstack_network_engine == 'ovs' %}
            # dpdk0_name: enp5s0f1
            # dpdk1_name: enp5s0f2
            # dpdk0_pci: '"0000:05:00.1"'
            # dpdk1_pci: '"0000:05:00.2"'
            # compute_dpdk_driver: uio
            # compute_ovs_pmd_cpu_mask: "0x6"
            # compute_ovs_dpdk_socket_mem: "1024"
            # compute_ovs_dpdk_lcore_mask: "0x400"
            # compute_ovs_memory_channels: "2"
        {%- endif %}
        {%- endif %}
        {%- endif %}
        {%- endif %}
  {%- if cookiecutter.get('ceph_enabled', 'False') == 'True' %}
    {%- if cookiecutter.get('ceph_hyper_converged', 'False') == 'False' %}
    {%- if cookiecutter.osd_padding_with_zeros == 'False' %}
    {%- set osd_digits = 0 %}
    {%- else %}
    {%- set osd_digits = 3 if cookiecutter.ceph_osd_node_count|string|length < 3 else cookiecutter.ceph_osd_node_count|string|length -%}
    {%- endif %}
      {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        {%- for i in range(cookiecutter.ceph_osd_node_count|int) %}
        {%- set ip_start = 200 -%}
        {%- set osd_start = 0 %}
        ceph_osd_node{{ ("%0" + osd_digits|string + "d")|format(osd_start + loop.index) }}:
          name: ${_param:ceph_osd_rack01_hostname}{{ ("%0" + osd_digits|string + "d")|format(osd_start + loop.index) }}
          domain: ${_param:cluster_domain}
          classes:
          - cluster.${_param:cluster_name}.ceph.osd
          params:
            salt_master_host: ${_param:reclass_config_master}
            ceph_crush_parent: rack01
            linux_system_codename: xenial
            single_address: ${_param:ceph_osd_rack01_single_subnet}.{{ ip_start|int + loop.index }}
            deploy_address: ${_param:ceph_osd_rack01_deploy_subnet}.{{ ip_start|int + loop.index }}
            backend_address: ${_param:ceph_osd_rack01_backend_subnet}.{{ ip_start|int + loop.index }}
        {%- endfor %}
      {%- else %}
        ceph_osd_rack01:
          name: ${_param:ceph_osd_rack01_hostname}<<count>>
          domain: ${_param:cluster_domain}
          classes:
            - cluster.${_param:cluster_name}.ceph.osd
          repeat:
            count: {{ cookiecutter.ceph_osd_count }}
            start: 1
            digits: {{ osd_digits }}
            params:
              single_address:
                value: ${_param:ceph_osd_rack01_single_subnet}.<<count>>
                start: 201
              backend_address:
                value: ${_param:ceph_osd_rack01_backend_subnet}.<<count>>
                start: 201
          params:
            salt_master_host: ${_param:reclass_config_master}
            ceph_crush_parent: rack01
            linux_system_codename: xenial
      {%- endif %}
    {%- endif %}
  {%- endif %}

