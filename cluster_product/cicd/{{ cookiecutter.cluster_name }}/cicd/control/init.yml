{%- macro password(size=16) -%}
{% for index in range(size) %}{{ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'|random }}{% endfor %}
{%- endmacro %}
classes:
  - system.linux.system.haveged
  - system.linux.repo.glusterfs
  - system.glusterfs.client.cluster
  - system.glusterfs.client.volume.aptly
  - system.glusterfs.client.volume.gerrit
  - system.glusterfs.client.volume.jenkins
  - system.glusterfs.client.volume.registry
  - system.glusterfs.client.volume.salt_pki
  - system.glusterfs.client.volume.mysql
  {%- if cookiecutter.openldap_enabled == 'True' %}
  - system.glusterfs.client.volume.openldap
  {%- endif %}
  {%- if cookiecutter.oss_enabled == 'True' %}
  - system.glusterfs.client.volume.devops_portal
  - system.glusterfs.client.volume.elasticsearch
  - system.glusterfs.client.volume.postgresql
  - system.glusterfs.client.volume.pushkin
  - system.glusterfs.client.volume.rundeck
  {%- if cookiecutter.oss_security_audit_enabled == 'True' %}
  - system.glusterfs.client.volume.security_monkey
  {%- endif %}
  {%- if cookiecutter.oss_cleanup_service_enabled == 'True' %}
  - system.glusterfs.client.volume.mongodb
  {%- endif %}
  {%- endif %}
 #- system.glusterfs.client.volume.salt
  # Docker
  - system.docker.host

  # Generate aptly-publisher config to use for jenkins slaves
  - system.aptly.client.publisher

  # Keepalived
  - system.keepalived.cluster.instance.cicd_control_vip

  # HAProxy
  - system.salt.minion.cert.proxy.cicd
  - system.haproxy.proxy.single
  - system.haproxy.proxy.listen.cicd.aptly
  - system.haproxy.proxy.listen.cicd.gerrit
  - system.haproxy.proxy.listen.cicd.jenkins
  - system.haproxy.proxy.listen.docker.registry
  - system.haproxy.proxy.listen.docker.visualizer
  {%- if cookiecutter.openldap_enabled == 'True' %}
  - system.haproxy.proxy.listen.openldap
  - system.haproxy.proxy.listen.phpldapadmin
  {%- endif %}
  - system.haproxy.proxy.listen.mysql
  - system.haproxy.proxy.listen.stats
  {%- if cookiecutter.oss_enabled == 'True' %}
  - system.haproxy.proxy.listen.oss.devops_portal
  - system.haproxy.proxy.listen.oss.elasticsearch
  - system.haproxy.proxy.listen.oss.postgresql
  - system.haproxy.proxy.listen.oss.pushkin
  - system.haproxy.proxy.listen.oss.rundeck
  {%- if cookiecutter.oss_security_audit_enabled == 'True' %}
  - system.haproxy.proxy.listen.oss.security_monkey
  {%- endif %}
  {%- if cookiecutter.oss_cleanup_service_enabled == 'True' %}
  - system.haproxy.proxy.listen.oss.janitor_monkey
  - system.haproxy.proxy.listen.oss.mongodb
  {%- endif %}

  # OSS Tooling
  {%- if cookiecutter.oss_enabled == 'True' %}
  - system.docker.swarm.stack.devops_portal
  - system.docker.swarm.stack.elasticsearch
  - system.docker.swarm.stack.postgresql
  - system.docker.swarm.stack.pushkin
  - system.docker.swarm.stack.rundeck
  {%- if cookiecutter.oss_security_audit_enabled == 'True' %}
  - system.docker.swarm.stack.security_monkey
  {%- endif %}
  {%- if cookiecutter.oss_cleanup_service_enabled == 'True' %}
  - system.docker.swarm.stack.janitor_monkey
  {%- endif %}

  # Docker networks
  - system.docker.swarm.network.runbook
  {%- endif %}

  - system.devops_portal.service.elasticsearch
  - system.devops_portal.service.gerrit
  - system.devops_portal.service.jenkins
  - system.devops_portal.service.pushkin
  - system.devops_portal.service.rundeck
  {%- if cookiecutter.oss_security_audit_enabled == 'True' %}
  - system.devops_portal.service.security_monkey
  {%- endif %}
  {%- if cookiecutter.oss_cleanup_service_enabled == 'True' %}
  - system.devops_portal.service.janitor_monkey
  {%- endif %}

  # Rundeck
  - system.rundeck.client.runbook
  {%- endif %}

parameters:
  _param:
    cluster_node01_name: ${_param:cicd_control_node01_hostname}
    cluster_node01_address: ${_param:cicd_control_node01_address}
    cluster_node02_name: ${_param:cicd_control_node02_hostname}
    cluster_node02_address: ${_param:cicd_control_node02_address}
    cluster_node03_name: ${_param:cicd_control_node03_hostname}
    cluster_node03_address: ${_param:cicd_control_node03_address}
    keepalived_vip_virtual_router_id: 180
    keepalived_vip_password: {{ password(16) }}
    keepalived_vip_interface: ens3
    cluster_vip_address: ${_param:control_vip_address}
    control_vip_address: ${_param:cicd_control_address}
    cluster_public_host: ${_param:control_vip_address}
    salt_api_password: {{ cookiecutter.salt_api_password }}
    # Docker images and versions
    docker_registry_http_secret: {{ password(16) }}
    # CI/CD service databases
    mysql_admin_password: {{ password(16) }}
    mysql_gerrit_password: {{ password(16) }}

    # Proxy
    cluster_ssl_certificate:
      enabled: true
      pem_file: /etc/haproxy/ssl/${_param:cluster_public_host}-all.pem
    haproxy_bind_address: ${_param:cluster_vip_address}
    haproxy_mysql_source_port: 13306

    # Aptly
    aptly_gpg_keypair_id: none
    aptly_gpg_passphrase: none
    aptly_server_secure: false
    aptly_gpg_public_key: none
    aptly_gpg_private_key: none

    {%- if cookiecutter.openldap_enabled == 'True' %}
    # OpenLDAP
    openldap_organisation: "{{ cookiecutter.openldap_organisation }}"
    openldap_dn: "dc={{ cookiecutter.openldap_domain|replace('.', ',dc=') }}"
    openldap_domain: "{{ cookiecutter.openldap_domain }}"
    openldap_admin_password: {{ password(16) }}
    openldap_config_password: {{ password(16) }}
    openldap_readonly_password: {{ password(16) }}
    {%- endif %}

    # Jenkins
    jenkins_slave_user: admin
    jenkins_client_user: admin

    {%- if cookiecutter.openldap_enabled == 'True' %}
    jenkins_admin_password: ${_param:openldap_admin_password}
    jenkins_security_ldap_server: ${_param:cluster_vip_address}
    jenkins_security_ldap_root_dn: ${_param:openldap_dn}
    jenkins_security_ldap_manager_dn: "cn=admin,${_param:openldap_dn}"
    jenkins_security_ldap_manager_password: ${_param:openldap_admin_password}
    {%- else %}
    jenkins_admin_password: {{ password(16) }}
    {%- endif %}
    jenkins_slave_password: ${_param:jenkins_admin_password}
    jenkins_client_password: ${_param:jenkins_admin_password}
    jenkins_admin_email: ${_param:admin_email}
    jenkins_admin_public_key: {{ cookiecutter.cicd_public_key }}
    jenkins_admin_private_key: |
      {{ cookiecutter.cicd_private_key|indent(6) }}
    # Jobs params
    jenkins_gerrit_url: ssh://admin@${_param:haproxy_gerrit_bind_host}:${_param:haproxy_gerrit_ssh_bind_port}
    jenkins_aptly_api_url: http://${_param:haproxy_aptly_api_bind_host}:${_param:haproxy_aptly_api_bind_port}
    jenkins_aptly_url: http://${_param:haproxy_aptly_public_bind_host}:${_param:haproxy_aptly_public_bind_port}
    # Gerrit

    {%- if cookiecutter.openldap_enabled == 'True' %}
    gerrit_admin_password: ${_param:openldap_admin_password}
    {%- else %}
    gerrit_admin_password: {{ password(16) }}
    {%- endif %}
    gerrit_admin_email: ${_param:admin_email}
    gerrit_public_host: http://${_param:haproxy_gerrit_bind_host}:${_param:haproxy_gerrit_bind_port}
    gerrit_admin_public_key: ${_param:jenkins_admin_public_key}
    gerrit_admin_private_key: ${_param:jenkins_admin_private_key}
    {%- if cookiecutter.openldap_enabled == 'True' %}
    gerrit_auth_type: LDAP
    gerrit_ldap_server: "ldap://${_param:cluster_vip_address}"
    gerrit_ldap_bind_user: "cn=admin,${_param:openldap_dn}"
    gerrit_ldap_bind_password: ${_param:openldap_admin_password}
    gerrit_ldap_account_base: ou=people,${_param:openldap_dn}
    gerrit_ldap_group_base: ou=groups,${_param:openldap_dn}
    {%- else %}
    gerrit_auth_type: DEVELOPMENT_BECOME_ANY_ACCOUNT
    {%- endif %}

    {%- if cookiecutter.oss_enabled == 'True' %}
    # DevOps Portal
    docker_image_devops_portal: {{ cookiecutter.oss_portal_image }}

    # ElasticSearch
    docker_image_elasticsearch: {{ cookiecutter.oss_elasticsearch_image }}

    # PostgreSQL
    docker_image_postgresql: {{ cookiecutter.oss_postgresql_image }}
    postgresql_admin_user_password: {{ password(16) }}
    postgresql_client_user: ${_param:postgresql_admin_user}
    postgresql_client_password: ${_param:postgresql_admin_user_password}
    postgresql_client_host: ${_param:haproxy_postgresql_bind_host}
    postgresql_client_port: ${_param:haproxy_postgresql_bind_port}

    # Pushkin
    docker_image_pushkin: {{ cookiecutter.oss_pushkin_image }}
    pushkin_db_user: pushkin
    pushkin_db_user_password: {{ password(16) }}
    pushkin_db_host: ${_param:haproxy_postgresql_bind_host}
    #..WebHook notification senders
    webhook_from: {{ cookiecutter.oss_notification_email_from }}
    webhook_recipients: {{ cookiecutter.oss_notification_email_recipients }}
    webhook_sfdc_username: {{ cookiecutter.oss_notification_saleforce_username }}
    webhook_login_id: 11
    webhook_application_id: 23

    # OSS OpenStack
    oss_openstack_username: {{ cookiecutter.oss_openstack_username }}
    oss_openstack_password: {{ cookiecutter.oss_openstack_password }}
    oss_openstack_project: {{ cookiecutter.oss_openstack_project }}
    oss_openstack_domain_id: {{ cookiecutter.oss_openstack_domain_id }}

    {%- if cookiecutter.oss_security_audit_enabled == 'True' %}
    # SecurityMonkey
    docker_image_security_monkey_api: {{ cookiecutter.oss_security_monkey_api_image }}
    docker_image_security_monkey_scheduler: {{ cookiecutter.oss_security_monkey_scheduler_image }}
    secmonkey_db_user: secmonkey
    secmonkey_db_user_password: {{ password(16) }}
    secmonkey_db_host: ${_param:haproxy_postgresql_bind_host}
    security_monkey_openstack:
      username: {{ cookiecutter.oss_security_audit_username }}
      password: {{ cookiecutter.oss_security_audit_password }}
      auth_url: {{ cookiecutter.oss_openstack_auth_url }}
      user_domain_name: {{ cookiecutter.oss_security_audit_user_domain_id }}
      project_domain_name: {{ cookiecutter.oss_security_audit_project_domain_id }}
    {%- endif %}

    {%- if cookiecutter.oss_cleanup_service_enabled == 'True' %}
    # JanitorMonkey
    docker_image_janitor_monkey: {{ cookiecutter.oss_janitor_monkey_image }}
    docker_image_mongodb: {{ cookiecutter.oss_mongodb_image }}
    docker_mongodb_admin_username: admin
    docker_mongodb_admin_password: {{ password(16) }}
    janitor_monkey_mongodb_host: ${_param:haproxy_mongodb_bind_host}
    janitor_monkey_openstack:
      username: {{ cookiecutter.oss_cleanup_service_username }}
      password: {{ cookiecutter.oss_cleanup_service_password }}
      auth_url: {{ cookiecutter.oss_openstack_auth_url }}
      project_name: {{ cookiecutter.oss_cleanup_service_project }}
      project_domain_name: {{ cookiecutter.oss_cleanup_service_project_domain_id }}
    {%- endif %}

    # Rundeck
    docker_image_rundeck: {{ cookiecutter.oss_rundeck_image }}
    rundeck_db_user: rundeck
    rundeck_db_user_password: {{ password(16) }}
    rundeck_db_host: ${_param:haproxy_postgresql_bind_host}
    rundeck_postgresql_username: ${_param:rundeck_db_user}
    rundeck_postgresql_password: ${_param:rundeck_db_user_password}
    rundeck_postgresql_database: rundeck
    rundeck_postgresql_host: ${_param:rundeck_db_host}

    rundeck_runbook_public_key: {{ cookiecutter.oss_runbook_public_key }}
    rundeck_runbook_private_key: |
      {{ cookiecutter.oss_runbook_private_key|indent(6) }}

    {%- if cookiecutter.oss_cis_enabled == 'True' %}
    # CIS
    rundeck_cis_enabled: {{ cookiecutter.oss_cis_enabled }}
    rundeck_cis_jobs_repository: {{ cookiecutter.oss_cis_jobs_repository }}
    rundeck_cis_jobs_revision: {{ cookiecutter.oss_cis_jobs_repository_branch }}
    rundeck_cis_os_auth_url: {{ cookiecutter.oss_openstack_auth_url }}/auth/tokens
    rundeck_cis_os_username: {{ cookiecutter.oss_cis_username }}
    rundeck_cis_os_password: {{ cookiecutter.oss_cis_password }}
    rundeck_cis_os_project_name: {{ cookiecutter.oss_cis_project }}
    rundeck_cis_os_domain_id: {{ cookiecutter.oss_cis_domain_id }}
    rundeck_cis_os_docker_image: {{ cookiecutter.oss_cis_openstack_image }}
    rundeck_cis_elasticsearch_url: http://${_param:haproxy_elasticsearch_bind_host}:${_param:haproxy_elasticsearch_http_bind_port}
    {%- endif %}
    {%- endif %}

  linux:
    system:
      package:
        ca-certificates-java:
          version: latest
    network:
      interface:
        ens3: ${_param:linux_single_interface}
