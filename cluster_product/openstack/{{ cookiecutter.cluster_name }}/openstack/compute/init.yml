classes:
{%- if cookiecutter.get('local_repositories', 'False') == 'True' %}
- system.linux.system.repo_local.mcp.extra
- system.linux.system.repo_local.mcp.salt
- system.linux.system.repo_local.mcp.apt_mirantis.openstack
- system.linux.system.repo_local.mcp.apt_mirantis.ubuntu
- system.linux.system.repo_local.mcp.apt_mirantis.saltstack_2016_3
{%- else %}
- system.linux.system.repo.mcp.extra
- system.linux.system.repo.mcp.salt
- system.linux.system.repo.mcp.apt_mirantis.openstack
- system.linux.system.repo.mcp.apt_mirantis.ubuntu
- system.linux.system.repo.mcp.apt_mirantis.saltstack_2016_3
{%- endif %}
{%- if cookiecutter.get('openstack_nova_compute_nfv_req_enabled', 'False') == 'True' or cookiecutter.get('openstack_nfv_dpdk_enabled', 'False') == 'True' %}
- system.nova.compute.nfv.hugepages
- system.nova.compute.nfv.cpu_pinning
{%- endif %}
- system.nova.compute.cluster
- system.nova.compute.notification.messagingv2
{%- if cookiecutter.stacklight_enabled == 'True' %}
- system.ceilometer.agent.cluster
{%- if cookiecutter.stacklight_version == '2' %}
- system.prometheus.exporters.libvirt
{%- endif %}
{%- endif %}
{%- if cookiecutter.openstack_network_engine == 'ovs' %}
- system.neutron.compute.cluster
{%- elif cookiecutter.openstack_network_engine == 'opencontrail' %}
- cluster.{{ cookiecutter.cluster_name }}.opencontrail.compute
{%- endif %}
{%- if cookiecutter.get('ceph_enabled', 'False') == 'True'  %}
{%- if cookiecutter.get('ceph_hyper_converged', 'False') == 'True' %}
- cluster.{{ cookiecutter.cluster_name }}.ceph.osd
{%- endif %}
- system.nova.compute.storage.ceph
- system.ceph.common.cluster
- cluster.{{ cookiecutter.cluster_name }}.ceph.common
{%- endif %}
- system.linux.network.dynamic_hosts
- cluster.{{ cookiecutter.cluster_name }}.infra
parameters:
  _param:
    cluster_vip_address: ${_param:openstack_control_address}
    cluster_local_address: ${_param:single_address}
    cluster_node01_hostname: ${_param:openstack_control_node01_hostname}
    cluster_node01_address: ${_param:openstack_control_node01_address}
    cluster_node02_hostname: ${_param:openstack_control_node02_hostname}
    cluster_node02_address: ${_param:openstack_control_node02_address}
    cluster_node03_hostname: ${_param:openstack_control_node03_hostname}
    cluster_node03_address: ${_param:openstack_control_node03_address}
    nova_vncproxy_url: https://${_param:cluster_public_host}:6080
    primary_first_nic: {{ cookiecutter.compute_primary_first_nic }}
    primary_second_nic: {{ cookiecutter.compute_primary_second_nic }}
{%- if cookiecutter.get('ceph_enabled', 'False') == 'True'  %}
{%- if cookiecutter.get('ceph_hyper_converged', 'False') == 'True' %}
  nova:
    compute:
      reserved_host_memory_mb: {{ cookiecutter.openstack_nova_compute_reserved_host_memory_mb }}
      vcpu_pin_set: {{ cookiecutter.openstack_nova_cpu_pinning }}
  linux:
    system:
      kernel:
        isolcpu: {{ cookiecutter.openstack_nova_cpu_pinning }}
{%- endif %}
{%- endif %}

{%- if cookiecutter.openstack_network_engine == 'ovs' %}
  {%- if cookiecutter.openstack_ovs_encapsulation_type == 'vlan' %}
  neutron:
    compute:
      backend:
        tenant_vlan_range: "${_param:neutron_tenant_vlan_range}"
  {%- endif %}
  linux:
    network:
      interface:
  {%- if cookiecutter.get('static_ips_on_deploy_network_enabled', 'False') == 'True' %}
        {{ cookiecutter.compute_deploy_nic }}: ${_param:linux_deploy_interface}
  {%- endif %}
  {%- if not cookiecutter.get('openstack_nfv_dpdk_enabled', 'False') == 'True' %}
        eth1:
          mtu: 9000
          enabled: true
          type: slave
          proto: manual
          name: ${_param:primary_first_nic}
          master: bond0
        eth2:
          mtu: 9000
          enabled: true
          type: slave
          proto: manual
          name: ${_param:primary_second_nic}
          master: bond0
      {%- if not cookiecutter.openstack_ovs_dvr_enabled == 'True' %}
        {%- if cookiecutter.openstack_ovs_encapsulation_type == 'vxlan' %}
        bond0:
          enabled: true
          proto: manual
          type: bond
          use_interfaces:
          - ${_param:primary_second_nic}
          - ${_param:primary_first_nic}
          slaves: ${_param:primary_second_nic} ${_param:primary_first_nic}
          mode: {{ cookiecutter.compute_bond_mode }}
        bond0.1:
          name: bond0.${_param:control_vlan}
          enabled: true
          type: vlan
          proto: static
          address: ${_param:single_address}
          netmask: ${_param:control_network_netmask}
          use_interfaces:
          - bond0
        bond0.2:
          name: bond0.${_param:tenant_vlan}
          enabled: true
          type: vlan
          proto: manual
          use_interfaces:
          - bond0
        br-mesh:
          enabled: true
          type: bridge
          address: ${_param:tenant_address}
          netmask: ${_param:tenant_network_netmask}
          use_interfaces:
          - bond0.${_param:tenant_vlan}
        {%- elif cookiecutter.openstack_ovs_encapsulation_type == 'vlan' %}
        bond0:
          enabled: true
          proto: manual
          ovs_bridge: br-prv
          ovs_type: OVSPort
          type: bond
          use_interfaces:
          - ${_param:primary_second_nic} ${_param:primary_first_nic}
          slaves: ${_param:primary_first_nic}
          mode: {{ cookiecutter.compute_bond_mode }}
        br-prv:
          enabled: true
          type: ovs_bridge
        br-mgmt:
          enabled: true
          type: ovs_port
          bridge: br-prv
          proto: static
          ovs_options: tag=${_param:control_vlan}
          address: ${_param:single_address}
          netmask: ${_param:control_network_netmask}
        {%- endif %}
      {%- elif cookiecutter.openstack_ovs_dvr_enabled == 'True' %}
        bond0:
          enabled: true
          proto: manual
          ovs_bridge: br-floating
          ovs_type: OVSPort
          type: bond
          use_interfaces:
          - ${_param:primary_first_nic}
          - ${_param:primary_second_nic}
          slaves: ${_param:primary_first_nic} ${_param:primary_second_nic}
          mode: {{ cookiecutter.compute_bond_mode }}
        br-floating:
          enabled: true
          type: ovs_bridge
        br-mgmt:
          enabled: true
          type: ovs_port
          bridge: br-floating
          proto: static
          ovs_options: tag=${_param:control_vlan}
          address: ${_param:single_address}
          netmask: ${_param:control_network_netmask}
        {%- if cookiecutter.openstack_ovs_encapsulation_type == 'vxlan' %}
        br-mesh:
          enabled: true
          type: ovs_port
          bridge: br-floating
          proto: static
          ovs_options: tag=${_param:tenant_vlan}
          address: ${_param:tenant_address}
          netmask: ${_param:tenant_network_netmask}
        {%- elif cookiecutter.openstack_ovs_encapsulation_type == 'vlan' %}
        br-prv:
          enabled: true
          type: ovs_bridge
        floating-to-prv:
          enabled: true
          type: ovs_port
          port_type: patch
          bridge: br-floating
          peer: prv-to-floating
        prv-to-floating:
          enabled: true
          type: ovs_port
          port_type: patch
          bridge: br-prv
          peer: floating-to-prv
        {%- endif %}
      {%- endif %}
      bridge: openvswitch
  {%- endif %}
{%- endif %}
## Best practice configure high speed interface for live migrations
#  nova:
#    libvirt:
#      migration_inbound_addr: ${_param:single_address}
