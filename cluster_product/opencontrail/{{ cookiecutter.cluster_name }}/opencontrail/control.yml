classes:
- service.haproxy.proxy.single
{%- if cookiecutter.get('local_repositories', 'False') == 'True' %}
- system.linux.system.repo_local.mcp.extra
- system.linux.system.repo_local.mcp.contrail
- system.linux.system.repo_local.mcp.apt_mirantis.openstack
- system.linux.system.repo_local.mcp.apt_mirantis.ubuntu
- system.linux.system.repo_local.mcp.apt_mirantis.saltstack
- system.linux.system.repo_local.mcp.apt_mirantis.cassandra
{%- if cookiecutter.stacklight_enabled == 'True' and cookiecutter.stacklight_version == '1' %}
- system.linux.system.repo_local.mcp.apt_mirantis.sensu
{%- endif %}
{%- else %}
- system.linux.system.repo.mcp.contrail
- system.linux.system.repo.mcp.extra
- system.linux.system.repo.mcp.apt_mirantis.openstack
- system.linux.system.repo.mcp.apt_mirantis.ubuntu
- system.linux.system.repo.mcp.apt_mirantis.saltstack
- system.linux.system.repo.mcp.apt_mirantis.cassandra
{%- if cookiecutter.stacklight_enabled == 'True' and cookiecutter.stacklight_version == '1' %}
- system.linux.system.repo.mcp.apt_mirantis.sensu
{%- endif %}
{%- endif %}
{%- if cookiecutter.stacklight_enabled == 'True' and cookiecutter.stacklight_version == '2' %}
- system.prometheus.exporters.jmx
{%- endif %}
{%- if cookiecutter.get('kubernetes_enabled','False') == 'True' %}
- system.opencontrail.client.resource.k8s_api
{%- endif %}
{%- if cookiecutter.opencontrail_version == "4.0"  and cookiecutter.get('kubernetes_enabled','False') == 'True' %}
- system.opencontrail.control.cluster4_0
{%- elif cookiecutter.opencontrail_version == "4.0" %}
- system.opencontrail.control.control4_0
{%- else %}
- system.opencontrail.control.control
{%- endif%}
- system.opencontrail.client.cluster
{%- if cookiecutter.get('openstack_enabled','False') == 'True' %}
- system.opencontrail.client.resource.openstack_metadata
{%- endif %}
- system.opencontrail.client.resource.edge_routers
- system.opencontrail.client.resource.control_node
- system.opencontrail.client.resource.config_node
- system.opencontrail.client.resource.database_node
- system.opencontrail.client.resource.global_vrouter_config
- cluster.{{ cookiecutter.cluster_name }}.infra.backup.client_zookeeper
- cluster.{{ cookiecutter.cluster_name }}.infra
{%- if cookiecutter.use_default_network_scheme != 'False' %}
- cluster.{{ cookiecutter.cluster_name }}.opencontrail.networking.virtual
{%- endif %}
parameters:
  _param:
    ### latest OpenStack repo on Trusty is Mitaka
    openstack_version: mitaka
    {%- if cookiecutter.get('kubernetes_enabled','False') == 'False'  and cookiecutter.openstack_enabled == 'False'  %}
    keepalived_vip_interface: eth1
    keepalived_vip_virtual_router_id: 60
    {%- endif %}
    cluster_vip_address: ${_param:opencontrail_control_address}
    cluster_local_address: ${_param:single_address}
    cluster_node01_hostname: ${_param:opencontrail_control_node01_hostname}
    cluster_node01_address: ${_param:opencontrail_control_node01_address}
    cluster_node02_hostname: ${_param:opencontrail_control_node02_hostname}
    cluster_node02_address: ${_param:opencontrail_control_node02_address}
    cluster_node03_hostname: ${_param:opencontrail_control_node03_hostname}
    cluster_node03_address: ${_param:opencontrail_control_node03_address}
    opencontrail_router01_hostname: {{ cookiecutter.opencontrail_router01_hostname }}
    opencontrail_router01_address: {{ cookiecutter.opencontrail_router01_address }}
    opencontrail_router02_hostname: {{ cookiecutter.opencontrail_router02_hostname }}
    opencontrail_router02_address: {{ cookiecutter.opencontrail_router02_address }}
    {%- if cookiecutter.get('kubernetes_enabled','False') == 'True' and cookiecutter.openstack_enabled == 'False' %}
    opencontrail_message_queue_node01_address: ${_param:opencontrail_control_node01_address}
    opencontrail_message_queue_node02_address: ${_param:opencontrail_control_node02_address}
    opencontrail_message_queue_node03_address: ${_param:opencontrail_control_node03_address}
    opencontrail_message_queue_address: ${_param:opencontrail_control_address}
    {%- endif %}
  linux:
    network:
      host:
        ctl:
          address: ${_param:opencontrail_control_address}
          names:
          - ctl
          - ctl.${_param:cluster_domain}
  opencontrail:
    web:
      network:
        host: ${_param:opencontrail_control_address}
      {%- if cookiecutter.get('kubernetes_enabled','False') == 'True'  and cookiecutter.openstack_enabled == 'False' %}
      identity:
        engine: k8s
      http:
        port: 8095
      {%- endif %}
    common:
      network:
        host: ${_param:opencontrail_control_address}
    config:
      network:
        host: ${_param:opencontrail_control_address}
    {%- if cookiecutter.get('kubernetes_enabled','False') == 'True'  and cookiecutter.openstack_enabled == 'False' %}
      aaa_mode: no-auth
      identity:
        engine: none
    collector:
      identity:
        engine: none
    client:
      api:
        host: ${_param:opencontrail_control_address}
    {%- endif %}
