classes:
# Docker
- system.docker.host
# Keepalived
- system.keepalived.cluster.instance.stacklight_monitor_vip
- system.salt.minion.cert.proxy.cicd

{%- if cookiecutter.get('local_repositories', 'False') == 'True' %}
- system.linux.system.repo_local.docker
- system.linux.system.repo_local.ubuntu
- system.linux.system.repo_local.mcp.extra
{%- else %}
- system.linux.system.repo.docker
- system.linux.system.repo.mcp.extra
{%- endif %}

{%- if cookiecutter.oss_enabled == 'True' %}
{%- if cookiecutter.get('local_repositories', 'False') == 'True' %}
- system.linux.system.repo_local.glusterfs
{%- else %}
- system.linux.system.repo.glusterfs
{%- endif %}
- system.glusterfs.client.cluster
- system.glusterfs.server.cluster
- system.glusterfs.client.volume.devops_portal
{%- if (cookiecutter.stacklight_enabled == 'False') and (cookiecutter.oss_enabled == 'True') %}
- system.glusterfs.client.volume.elasticsearch
{%- endif %}
- system.glusterfs.client.volume.postgresql
- system.glusterfs.client.volume.pushkin
- system.glusterfs.client.volume.rundeck
- system.haproxy.proxy.single
- system.haproxy.proxy.listen.oss.devops_portal
{%- if (cookiecutter.stacklight_enabled == 'False') and (cookiecutter.oss_enabled == 'True') %}
- system.haproxy.proxy.listen.oss.elasticsearch
{%- endif %}
- system.haproxy.proxy.listen.oss.postgresql
- system.haproxy.proxy.listen.oss.pushkin
- system.haproxy.proxy.listen.oss.rundeck
- system.glusterfs.server.volume.devops_portal
#Switch to generic Elasticsearch
{%- if (cookiecutter.stacklight_enabled == 'False') and (cookiecutter.oss_enabled == 'True') %}
- system.glusterfs.server.volume.elasticsearch
{%- endif %}
- system.glusterfs.server.volume.postgresql
- system.glusterfs.server.volume.pushkin
- system.glusterfs.server.volume.rundeck
{%- if cookiecutter.oss_security_audit_enabled == 'True' %}
- system.glusterfs.client.volume.security_monkey
- system.glusterfs.server.volume.security_monkey
- system.haproxy.proxy.listen.oss.security_monkey
{%- endif %}
{%- if cookiecutter.oss_cleanup_service_enabled == 'True' %}
- system.glusterfs.client.volume.mongodb
- system.glusterfs.server.volume.mongodb
- system.haproxy.proxy.listen.oss.janitor_monkey
- system.haproxy.proxy.listen.oss.mongodb
{%- endif %}
{%- endif %}

{%- if cookiecutter.kubernetes_enabled == 'True' %}
- system.salt.minion.cert.prometheus_server
{%- endif %}
{%- if cookiecutter.openstack_enabled == 'True' %}
- system.heka.remote_collector.container
- system.heka.remote_collector.input.amqp
- system.heka.remote_collector.output.elasticsearch
- system.heka.remote_collector.output.telegraf
{%- endif %}
- system.telegraf.agent.remote
{%- if cookiecutter.openstack_enabled == 'True' %}
- system.telegraf.agent.remote.input.http_listener
{%- endif %}
- system.prometheus.alertmanager.notification.pushkin
- system.prometheus.server.alert.labels_add.route
- system.prometheus.server.remote_write.docker
- system.prometheus.server.target.dns
- system.prometheus.server.alertmanager.dns
- system.prometheus.pushgateway.container
- system.prometheus.server.container
- system.prometheus.alertmanager.container
- system.prometheus.remote_storage_adapter.container
- cluster.{{ cookiecutter.cluster_name }}.infra
parameters:
  _param:
    {%- if cookiecutter.openstack_enabled == 'True' %}
    heka_amqp_host: ${_param:openstack_message_queue_address}
    {%- if cookiecutter.get('offline_deployment', 'False') == 'True' %}
    docker_image_remote_collector: ${_param:aptly_server_hostname}:5000/heka:latest
    {%- else %}
    docker_image_remote_collector: docker-prod-local.artifactory.mirantis.com/openstack-docker/heka:latest
    {%- endif %}
    remote_collector_telegraf_host: monitoring_remote_agent
    {%- endif %}
    keepalived_prometheus_vip_address: ${_param:stacklight_monitor_address}
    keepalived_prometheus_vip_password: 'password'
    keepalived_prometheus_vip_interface: ens3
    alertmanager_notification_pushkin_host: localhost
    alertmanager_notification_pushkin_port: 18887
    cluster_vip_address: ${_param:stacklight_monitor_address}

{%- if cookiecutter.oss_enabled == 'True' %}
    glusterfs_service_host: ${_param:stacklight_monitor_address}
    glusterfs_node01_address: ${_param:stacklight_monitor_node01_address}
    glusterfs_node02_address: ${_param:stacklight_monitor_node02_address}
    glusterfs_node03_address: ${_param:stacklight_monitor_node03_address}

    haproxy_gerrit_bind_host: ${_param:cicd_control_address}
    haproxy_gerrit_bind_port: 8080
    haproxy_gerrit_ssl:
      enabled: false

    haproxy_jenkins_ssl:
      enabled: false
    haproxy_jenkins_bind_host: ${_param:cicd_control_address}
    haproxy_jenkins_bind_port: 8081
{%- endif %}
    keepalived_stacklight_monitor_vip_address: ${_param:stacklight_monitor_address}

    control_vip_address: ${_param:stacklight_monitor_address}
    cluster_node01_name: ${_param:stacklight_monitor_node01_hostname}
    cluster_node01_address: ${_param:stacklight_monitor_node01_address}
    cluster_node02_name: ${_param:stacklight_monitor_node02_hostname}
    cluster_node02_address: ${_param:stacklight_monitor_node02_address}
    cluster_node03_name: ${_param:stacklight_monitor_node03_hostname}
    cluster_node03_address: ${_param:stacklight_monitor_node03_address}
    keepalived_vip_virtual_router_id: 280
    keepalived_stacklight_monitor_vip_password: odMPiBZBzGiL7FR3
    keepalived_stacklight_monitor_vip_interface: ens3
    cluster_public_host: ${_param:cluster_vip_address}
    docker_registry_http_secret: fx13spNlA8ezEaiT
    # Proxy
    cluster_ssl_certificate:
      enabled: true
      pem_file: /etc/haproxy/ssl/${_param:cluster_public_host}-all.pem
    haproxy_bind_address: ${_param:cluster_vip_address}
  {%- if cookiecutter.get('offline_deployment', 'False') == 'True' %}
  docker:
    host:
      insecure_registries:
        - ${_param:aptly_server_hostname}:5000
  {%- endif %}
  prometheus:
    server:
      storage:
        local:
          target_heap_size: 3221225472
  linux:
    network:
      interface:
        ens3: ${_param:linux_single_interface}
